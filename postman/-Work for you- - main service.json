{
	"info": {
		"_postman_id": "d1195832-c190-417b-8a33-15aa90f9a78b",
		"name": "\"Work for you\" - main service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Resume",
			"item": [
				{
					"name": "Добавление нового пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Daniil\",\n   \"email\": \"dan@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового резюме пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, description\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"description\": \"the best surveyor is looking for a job\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/resumes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"resumes"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1",
									"description": "user id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Редактирование резюме пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, description\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"description\": \"the best surveyor is looking for a job and really wants to earn a lot \"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/resumes/:resumeId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"resumes",
								":resumeId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1",
									"description": "user id"
								},
								{
									"key": "resumeId",
									"value": "1",
									"description": "resume id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех резюме пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.collectionVariables.get('response');",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Резюме должно содержать поля: id, description, createdOn, creator\", function () {",
									"pm.expect(target[0]).to.have.property('id');",
									"    pm.expect(target[0]).to.have.property('description');",
									"    pm.expect(target[0]).to.have.property('createdOn');",
									"    pm.expect(target[0]).to.have.property('creator');",
									"});",
									"",
									"pm.test(\"Должно быть найдено только одно резюме\", function () {",
									"    pm.expect(target.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/resumes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"resumes"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1",
									"description": "user id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение информации о резюме по его идентификатору",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.collectionVariables.get('response');",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Резюме должно содержать поля: id, description, createdOn, creator\", function () {",
									"pm.expect(target).to.have.property('id');",
									"    pm.expect(target).to.have.property('description');",
									"    pm.expect(target).to.have.property('createdOn');",
									"    pm.expect(target).to.have.property('creator');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/resumes/:resumeId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"resumes",
								":resumeId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1",
									"description": "user id"
								},
								{
									"key": "resumeId",
									"value": "1",
									"description": "resume id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление резюме пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/resumes/:resumeId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"resumes",
								":resumeId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1",
									"description": "user id"
								},
								{
									"key": "resumeId",
									"value": "1",
									"description": "resume id"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Добавление нового пользователя 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Dmitry\",\n   \"email\": \"dmi@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2",
									"description": "userId"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Добавление новой категории",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Construction of buildings and structures\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение категории",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Bridge construction\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories/:catId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories",
								":catId"
							],
							"variable": [
								{
									"key": "catId",
									"value": "1",
									"description": "category id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение категорий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.collectionVariables.get('response');",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {",
									"pm.expect(target[0]).to.have.property('id');",
									"pm.expect(target[0]).to.have.property('name');",
									"});",
									"",
									"pm.test(\"Должна быть найдена только одна категория\", function () {",
									"    pm.expect(target.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categories?from=0&size=1000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение информации о категории по ее идентификатору",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.collectionVariables.get('response');",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categories/:catId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categories",
								":catId"
							],
							"variable": [
								{
									"key": "catId",
									"value": "1",
									"description": "category id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление категории",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/categories/:catId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories",
								":catId"
							],
							"variable": [
								{
									"key": "catId",
									"value": "1",
									"description": "category id"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Company",
			"item": [
				{
					"name": "Добавление новой компании",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, description\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Sbertech\",\n   \"description\" : \"The largest Russian IT company engaged in the development and implementation of software solutions for Sberbank.\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/companies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового автора комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Leonid\",\n   \"email\": \"leo@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария к компании",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('created');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Good company!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:compId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":compId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1",
									"description": "user id"
								},
								{
									"key": "compId",
									"value": "1",
									"description": "company id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка компаний",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.collectionVariables.get('response');",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Категория должна содержать поля: id, name, description\", function () {",
									"pm.expect(target[0]).to.have.property('id');",
									"pm.expect(target[0]).to.have.property('name');",
									"pm.expect(target[0]).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Должна быть найдена только одна компания\", function () {",
									"    pm.expect(target.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/companies?from=0&size=1000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"companies"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение информации о компании по ее идентификатору",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.collectionVariables.get('response');",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Категория должна содержать поля: id, name, description\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/companies/:compId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"companies",
								":compId"
							],
							"variable": [
								{
									"key": "compId",
									"value": "1",
									"description": "company id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1",
									"description": "user id"
								},
								{
									"key": "commentId",
									"value": "1",
									"description": "comment id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление компании",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/companies/:compId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"companies",
								":compId"
							],
							"variable": [
								{
									"key": "compId",
									"value": "1",
									"description": "company id"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Vacancy",
			"item": [
				{
					"name": "Добавление нового hr менеджера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Victor\",\n   \"email\": \"victorHR@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление новой компании",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, description\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Avito\",\n   \"description\" : \"The best Russian IT company.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/companies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление новой категории",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"IT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление новой вакансии",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Событие должно содержать поля: id, name, category, publishedOn, recruiter, description, state, company, location\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('description');",
									"pm.expect(target).to.have.property('category');",
									"pm.expect(target).to.have.property('publishedOn');",
									"pm.expect(target).to.have.property('recruiter');",
									"pm.expect(target).to.have.property('state');",
									"pm.expect(target).to.have.property('company');",
									"pm.expect(target).to.have.property('location');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Java разработчик\",\n  \"description\": \"«Наша компания является независимым разработчиком программного обеспечения и у нас есть вакансия Junior Software Engineer. Мы не требуем многолетний опыт работы, готовы помогать осваивать навыки профессионального программиста и предлагаем высокую заработную плату и комфортные условия работы.\",\n  \"category\": 1,\n  \"location\": {\n    \"lat\": 23.75,\n    \"lon\": 37.62\n  },\n  \"company\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:recruiterId/vacancies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":recruiterId",
								"vacancies"
							],
							"variable": [
								{
									"key": "recruiterId",
									"value": "1",
									"description": "recruiter id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Редактирование вакансии hr менеджером",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Java developer\",\n  \"description\": \"«Our company is an independent software developer and we have a vacancy for a Junior Software Engineer. We do not require many years of work experience, we are ready to help master the skills of a professional programmer and offer high wages and comfortable working conditions.\",\n  \"category\": 2,\n  \"location\": {\n    \"lat\": 23.75,\n    \"lon\": 37.62\n  },\n  \"company\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:recruiterId/vacancies/:vacancyId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":recruiterId",
								"vacancies",
								":vacancyId"
							],
							"variable": [
								{
									"key": "recruiterId",
									"value": "1",
									"description": "recruiter id"
								},
								{
									"key": "vacancyId",
									"value": "1",
									"description": "vacancy id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение информации о вакансии по ее идентификатору",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.collectionVariables.get('response');",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Вакансия должна содержать поля: id, name, description\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/vacancies/:vacancyId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"vacancies",
								":vacancyId"
							],
							"variable": [
								{
									"key": "vacancyId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка всех вакансий компании",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/companies/:compId/vacancies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"companies",
								":compId",
								"vacancies"
							],
							"variable": [
								{
									"key": "compId",
									"value": "1",
									"description": "company id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск вакансий по тексту",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/vacancies/search?text=deVeLoper",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"vacancies",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "deVeLoper"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление вакансии hr менеджером",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:recruiterId/vacancies/:vacancyId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":recruiterId",
								"vacancies",
								":vacancyId"
							],
							"variable": [
								{
									"key": "recruiterId",
									"value": "1",
									"description": "recruiter id"
								},
								{
									"key": "vacancyId",
									"value": "1",
									"description": "vacancy id"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}